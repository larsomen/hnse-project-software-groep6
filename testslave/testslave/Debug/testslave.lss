
testslave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800076  00800076  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cab  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007db  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000635  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000460  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_1>
   8:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  8a:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ontvangData>:
		directionL = 0;
		directionR = 0;
		speedL = 0;
		speedR = 0;
	}
	act(speedL, speedR, directionL, directionR);
  92:	66 23       	and	r22, r22
  94:	59 f0       	breq	.+22     	; 0xac <ontvangData+0x1a>
  96:	fc 01       	movw	r30, r24
  98:	ae ea       	ldi	r26, 0xAE	; 174
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	9c 01       	movw	r18, r24
  9e:	26 0f       	add	r18, r22
  a0:	31 1d       	adc	r19, r1
  a2:	91 91       	ld	r25, Z+
  a4:	9d 93       	st	X+, r25
  a6:	e2 17       	cp	r30, r18
  a8:	f3 07       	cpc	r31, r19
  aa:	d9 f7       	brne	.-10     	; 0xa2 <ontvangData+0x10>
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <data_flag>
  b2:	08 95       	ret

000000b4 <verzendByte>:
  b4:	08 95       	ret

000000b6 <init_i2c_slave>:
  b6:	11 b8       	out	0x01, r1	; 1
  b8:	90 e2       	ldi	r25, 0x20	; 32
  ba:	90 b9       	out	0x00, r25	; 0
  bc:	95 e4       	ldi	r25, 0x45	; 69
  be:	96 bf       	out	0x36, r25	; 54
  c0:	88 0f       	add	r24, r24
  c2:	82 b9       	out	0x02, r24	; 2
  c4:	08 95       	ret

000000c6 <slaaftwi>:
  c6:	81 b1       	in	r24, 0x01	; 1
  c8:	80 3a       	cpi	r24, 0xA0	; 160
  ca:	d1 f0       	breq	.+52     	; 0x100 <slaaftwi+0x3a>
  cc:	28 f4       	brcc	.+10     	; 0xd8 <slaaftwi+0x12>
  ce:	80 36       	cpi	r24, 0x60	; 96
  d0:	41 f0       	breq	.+16     	; 0xe2 <slaaftwi+0x1c>
  d2:	80 38       	cpi	r24, 0x80	; 128
  d4:	49 f0       	breq	.+18     	; 0xe8 <slaaftwi+0x22>
  d6:	35 c0       	rjmp	.+106    	; 0x142 <slaaftwi+0x7c>
  d8:	88 3a       	cpi	r24, 0xA8	; 168
  da:	21 f1       	breq	.+72     	; 0x124 <slaaftwi+0x5e>
  dc:	88 3b       	cpi	r24, 0xB8	; 184
  de:	59 f1       	breq	.+86     	; 0x136 <slaaftwi+0x70>
  e0:	30 c0       	rjmp	.+96     	; 0x142 <slaaftwi+0x7c>
  e2:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <teller.1843>
  e6:	2d c0       	rjmp	.+90     	; 0x142 <slaaftwi+0x7c>
  e8:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <teller.1843>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8e 0f       	add	r24, r30
  f0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <teller.1843>
  f4:	83 b1       	in	r24, 0x03	; 3
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ea 58       	subi	r30, 0x8A	; 138
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 83       	st	Z, r24
  fe:	21 c0       	rjmp	.+66     	; 0x142 <slaaftwi+0x7c>
 100:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <ontfunc>
 104:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <ontfunc+0x1>
 108:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <teller.1843>
 10c:	86 e7       	ldi	r24, 0x76	; 118
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	09 95       	icall
 112:	e6 e7       	ldi	r30, 0x76	; 118
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8a e8       	ldi	r24, 0x8A	; 138
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	11 92       	st	Z+, r1
 11c:	e8 17       	cp	r30, r24
 11e:	f9 07       	cpc	r31, r25
 120:	e1 f7       	brne	.-8      	; 0x11a <slaaftwi+0x54>
 122:	0f c0       	rjmp	.+30     	; 0x142 <slaaftwi+0x7c>
 124:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <teller.1843>
 128:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <verfunc>
 12c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <verfunc+0x1>
 130:	09 95       	icall
 132:	83 b9       	out	0x03, r24	; 3
 134:	06 c0       	rjmp	.+12     	; 0x142 <slaaftwi+0x7c>
 136:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <verfunc>
 13a:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <verfunc+0x1>
 13e:	09 95       	icall
 140:	83 b9       	out	0x03, r24	; 3
 142:	86 b7       	in	r24, 0x36	; 54
 144:	80 68       	ori	r24, 0x80	; 128
 146:	86 bf       	out	0x36, r24	; 54
 148:	08 95       	ret

0000014a <__vector_19>:
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	0e 94 63 00 	call	0xc6	; 0xc6 <slaaftwi>
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <writeChar>:
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <writeChar>
 196:	8c b9       	out	0x0c, r24	; 12
 198:	08 95       	ret

0000019a <writeString>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <writeString+0x18>
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	0e 94 c9 00 	call	0x192	; 0x192 <writeChar>
 1ac:	89 91       	ld	r24, Y+
 1ae:	81 11       	cpse	r24, r1
 1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <writeString+0xe>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <initUSART>:
 1b8:	10 bc       	out	0x20, r1	; 32
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	89 b9       	out	0x09, r24	; 9
 1be:	1b b8       	out	0x0b, r1	; 11
 1c0:	86 e8       	ldi	r24, 0x86	; 134
 1c2:	80 bd       	out	0x20, r24	; 32
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	8a b9       	out	0x0a, r24	; 10
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 cd 00 	call	0x19a	; 0x19a <writeString>
 1d0:	08 95       	ret

000001d2 <writeInteger>:
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	61 97       	sbiw	r28, 0x11	; 17
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	46 2f       	mov	r20, r22
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	be 01       	movw	r22, r28
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	0e 94 98 01 	call	0x330	; 0x330 <itoa>
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	0e 94 cd 00 	call	0x19a	; 0x19a <writeString>
 1fc:	61 96       	adiw	r28, 0x11	; 17
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <motorIint>:
 20e:	84 b3       	in	r24, 0x14	; 20
 210:	8c 60       	ori	r24, 0x0C	; 12
 212:	84 bb       	out	0x14, r24	; 20
 214:	81 ea       	ldi	r24, 0xA1	; 161
 216:	8f bd       	out	0x2f, r24	; 47
 218:	82 ed       	ldi	r24, 0xD2	; 210
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	97 bd       	out	0x27, r25	; 39
 21e:	86 bd       	out	0x26, r24	; 38
 220:	1b bc       	out	0x2b, r1	; 43
 222:	1a bc       	out	0x2a, r1	; 42
 224:	19 bc       	out	0x29, r1	; 41
 226:	18 bc       	out	0x28, r1	; 40
 228:	89 e0       	ldi	r24, 0x09	; 9
 22a:	8e bd       	out	0x2e, r24	; 46
 22c:	08 95       	ret

0000022e <initEncoders>:
	OCR1B = speedL;
}

void initEncoders(void){
	// Enable/Disable Encoders, IR Receiver
	DDRB |= (1 << 4);
 22e:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1 << PINB4);
 230:	c4 9a       	sbi	0x18, 4	; 24
	//zet input van sensor
	DDRD |= (0<<2)|(0<<3);
 232:	81 b3       	in	r24, 0x11	; 17
 234:	81 bb       	out	0x11, r24	; 17
	// Initialize External interrupts:
	MCUCR |= (1<<ISC00) | (1<<ISC10);
 236:	85 b7       	in	r24, 0x35	; 53
 238:	85 60       	ori	r24, 0x05	; 5
 23a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1) | (1 << INT0);
 23c:	8b b7       	in	r24, 0x3b	; 59
 23e:	80 6c       	ori	r24, 0xC0	; 192
 240:	8b bf       	out	0x3b, r24	; 59
	encoder_L_count = 0;
 242:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <encoder_L_count+0x1>
 246:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <encoder_L_count>
	encoder_R_count = 0;
 24a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <encoder_R_count+0x1>
 24e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <encoder_R_count>
 252:	08 95       	ret

00000254 <main>:

int main(void)
{

	//DDRC=0xFF;
	initUSART();
 254:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <initUSART>
	init_i2c_slave(8);
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	0e 94 5b 00 	call	0xb6	; 0xb6 <init_i2c_slave>
	}
	TWCR |= (1<<TWINT);    // Clear TWINT Flag
}

void init_i2c_ontvang( void (*ontvanger) (uint8_t [],uint8_t)) {
	ontfunc=ontvanger;
 25e:	89 e4       	ldi	r24, 0x49	; 73
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <ontfunc+0x1>
 266:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <ontfunc>
}

void init_i2c_verzend( uint8_t (*verzender) ()) {
	verfunc=verzender;
 26a:	8a e5       	ldi	r24, 0x5A	; 90
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <verfunc+0x1>
 272:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <verfunc>
	
	/*verzendByte is de functie die aangeroepen wordt
	wanneer de slave een byte naar de master verzend*/
	init_i2c_verzend(verzendByte);

	motorIint();
 276:	0e 94 07 01 	call	0x20e	; 0x20e <motorIint>
	initEncoders();
 27a:	0e 94 17 01 	call	0x22e	; 0x22e <initEncoders>
	sei(); //De slave van i2c werkt met interrupt
 27e:	78 94       	sei
		//control(data_ont[0]);
		//data_ont[0] = 255;
		//_delay_ms(10);
		uint16_t hoek;

		writeInteger(data_ont[0],10);
 280:	ce ea       	ldi	r28, 0xAE	; 174
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	88 81       	ld	r24, Y
 286:	6a e0       	ldi	r22, 0x0A	; 10
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <writeInteger>
		writeChar('\t');
 28e:	89 e0       	ldi	r24, 0x09	; 9
 290:	0e 94 c9 00 	call	0x192	; 0x192 <writeChar>
		writeInteger(data_ont[1],10);
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	6a e0       	ldi	r22, 0x0A	; 10
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <writeInteger>
		writeChar('\t');
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	0e 94 c9 00 	call	0x192	; 0x192 <writeChar>
		hoek = ((data_ont[1]<<8)+data_ont[0]);
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	98 2f       	mov	r25, r24
 2aa:	88 27       	eor	r24, r24
 2ac:	28 81       	ld	r18, Y
		writeInteger(hoek,10);
 2ae:	6a e0       	ldi	r22, 0x0A	; 10
 2b0:	82 0f       	add	r24, r18
 2b2:	91 1d       	adc	r25, r1
 2b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <writeInteger>
		writeString("\r\n");
 2b8:	82 e7       	ldi	r24, 0x72	; 114
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 cd 00 	call	0x19a	; 0x19a <writeString>


    }
 2c0:	e1 cf       	rjmp	.-62     	; 0x284 <main+0x30>

000002c2 <__vector_1>:
	encoder_R_count = 0;
}

//enc_L
ISR(INT0_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
	encoder_L_count++;
 2d0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <encoder_L_count>
 2d4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <encoder_L_count+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <encoder_L_count+0x1>
 2de:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <encoder_L_count>
	encoder_L_driven++;
 2e2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <encoder_L_driven>
 2e6:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <encoder_L_driven+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <encoder_L_driven+0x1>
 2f0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <encoder_L_driven>
}
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_2>:
//enc_R
ISR(INT1_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
	encoder_R_count++;
 310:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <encoder_R_count>
 314:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <encoder_R_count+0x1>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <encoder_R_count+0x1>
 31e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <encoder_R_count>
}
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <itoa>:
 330:	45 32       	cpi	r20, 0x25	; 37
 332:	51 05       	cpc	r21, r1
 334:	20 f4       	brcc	.+8      	; 0x33e <itoa+0xe>
 336:	42 30       	cpi	r20, 0x02	; 2
 338:	10 f0       	brcs	.+4      	; 0x33e <itoa+0xe>
 33a:	0c 94 a3 01 	jmp	0x346	; 0x346 <__itoa_ncheck>
 33e:	fb 01       	movw	r30, r22
 340:	10 82       	st	Z, r1
 342:	cb 01       	movw	r24, r22
 344:	08 95       	ret

00000346 <__itoa_ncheck>:
 346:	bb 27       	eor	r27, r27
 348:	4a 30       	cpi	r20, 0x0A	; 10
 34a:	31 f4       	brne	.+12     	; 0x358 <__itoa_ncheck+0x12>
 34c:	99 23       	and	r25, r25
 34e:	22 f4       	brpl	.+8      	; 0x358 <__itoa_ncheck+0x12>
 350:	bd e2       	ldi	r27, 0x2D	; 45
 352:	90 95       	com	r25
 354:	81 95       	neg	r24
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	0c 94 af 01 	jmp	0x35e	; 0x35e <__utoa_common>

0000035c <__utoa_ncheck>:
 35c:	bb 27       	eor	r27, r27

0000035e <__utoa_common>:
 35e:	fb 01       	movw	r30, r22
 360:	55 27       	eor	r21, r21
 362:	aa 27       	eor	r26, r26
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	aa 1f       	adc	r26, r26
 36a:	a4 17       	cp	r26, r20
 36c:	10 f0       	brcs	.+4      	; 0x372 <__utoa_common+0x14>
 36e:	a4 1b       	sub	r26, r20
 370:	83 95       	inc	r24
 372:	50 51       	subi	r21, 0x10	; 16
 374:	b9 f7       	brne	.-18     	; 0x364 <__utoa_common+0x6>
 376:	a0 5d       	subi	r26, 0xD0	; 208
 378:	aa 33       	cpi	r26, 0x3A	; 58
 37a:	08 f0       	brcs	.+2      	; 0x37e <__utoa_common+0x20>
 37c:	a9 5d       	subi	r26, 0xD9	; 217
 37e:	a1 93       	st	Z+, r26
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	79 f7       	brne	.-34     	; 0x362 <__utoa_common+0x4>
 384:	b1 11       	cpse	r27, r1
 386:	b1 93       	st	Z+, r27
 388:	11 92       	st	Z+, r1
 38a:	cb 01       	movw	r24, r22
 38c:	0c 94 c8 01 	jmp	0x390	; 0x390 <strrev>

00000390 <strrev>:
 390:	dc 01       	movw	r26, r24
 392:	fc 01       	movw	r30, r24
 394:	67 2f       	mov	r22, r23
 396:	71 91       	ld	r23, Z+
 398:	77 23       	and	r23, r23
 39a:	e1 f7       	brne	.-8      	; 0x394 <strrev+0x4>
 39c:	32 97       	sbiw	r30, 0x02	; 2
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <strrev+0x18>
 3a0:	7c 91       	ld	r23, X
 3a2:	6d 93       	st	X+, r22
 3a4:	70 83       	st	Z, r23
 3a6:	62 91       	ld	r22, -Z
 3a8:	ae 17       	cp	r26, r30
 3aa:	bf 07       	cpc	r27, r31
 3ac:	c8 f3       	brcs	.-14     	; 0x3a0 <strrev+0x10>
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
